2012.09.12 Wed.

xy., .ybu, alabam.bu 等が使えるようにする。
da, de, di, do と同様の扱いとする。
これらを結果にどう表示しようか。
da du la hoger..i de du la hager.
といった感じか。

その前に package 化してしまおうかな。

2012.09.13 Thu.

PrologLike な部分をもっと本質的なところから書き換えたい。
変数、定数、事実、ルール等。

静的スコープとするために、アルファ変換が必要だ。
あるいは、スコープ名による修飾が必要。

けっこう大変だ。
一度単純化したモデルを作ってからのほうが良さそう。

きちんとした理論を作ってからのほうが良い気がする。
主に unification という問題だ。

unification について。
f(x) = g(y) という unification は
[f, x] = [g, y] という unification と考えることができる。

Unification.hs の deleteElem はいらないかもしれないが、
今のところ単純に考えられるようにいれておく。
コードを整理する際に消すかもしれない。

merge を作る。
同じ X, Y 等があったら value を比較してひとつにする。
無ければそのまま追加。

not を実装するのが思った以上に難しい。
単純に unification できなければ良いというわけではない。
もちろん unification できなかった場合には問題なく、Just とできる。
また unification できて、変数が残らなかった場合にも問題なく Nothing とできる。
しかし、unification できた場合で、変数が残った場合、
変数の組み合わせによっては not が true となる組み合わせも存在する。
しかも、ある unification の片方の辺のみを not とするわけだ。
これはなかなか難しい。

つまり、これは他の unification が全て終わったあとで、
それらを適用したうえで、not のかかっている辺が矛盾するような組み合わせのみを
残すということだ。
つまり、ある Fact つまり [Term] に対して、
Result を適用する関数をまずは使る必要がある。
たとえば、(X, Y) が残った場合には not は true となる。
つまり不定の2つは true にも false にもできる。
(X, hoge) が残った場合も同様だ。

(x, Y, Z) と not (x, B, C) を unification することを考える。

たとえば du(X, X) において not du(Y, Z) とは
(du, X, X) と (du, Y, Z) が unification できないということだ。
つまり、Y と Z に違うものが入り得る場合、これは go'i となる。
となると、(x, Y, Z) と (x, B, C) は unification できない状態とならないので、
nago'i となるのか。
いくつかの rule があった場合にはどうか。
複数の rule があった場合には肯定の場合には or 接続ということになる。
ということは否定の場合にはどれかひとつでも成り立ったらだめということだ。
全てとの unification で Nothing となるような (x, B, C) の組み合わせがあれば、
OK ということになる。

つまり、最初の項だけは match しなくてはならない。
残りの項については、どれかひとつでも、あるいは互いにでも良いので、
何かしら match しない値が選べれば良い。
最初の項が match する fact との unification を全て行い、
そのどれとでも unification できない値を選び得るかどうかを見る。

2012.09.14 Fri.

たとえば、(A, B, C) と (X, Y, Z) が unification できないとは、
A /= X || B /= Y || C /= Z ということだ。
これを表現しなくてはならない。
つまり、(A, B, C) not match (X, Y, Z) かつ (D, E) not match (W, V) は、
[[(A, X), (B, Y), (C, Z)], [(D, w), (E, V)]]
と表せる。

unification できない状態。
unification できないと確定した状態。
unification できない可能性のある状態。
unification できると確定した状態。

項があるのに Just [] となったら unification できないと確定。

not の check はできそう。
そしたら、次にすることは、すべての rule と unification した結果のすべてにおいて、
check が通ることを確かめることだ。

たとえば、(du, D, D) とした場合、
not (du, X, Y) について考えるとして。
その場合、X と Y が等しかったとしても、
それらと等しくない D が考えられるということで not (du, X, Y) が成り立ってしまう。
(X, Y, Z) (A, B, C) においてはどれかのペアが違えば良いということだが。
とりあえず、check される側に存在しない変数については消してしまうというように
してみようか。

今のところすべての変数がグローバルとなってしまっているため、たとえば、
以下のような例でうまく動かない。

.i do du do
.i da broda de .ijanai tu'e
	da du lo cinfo .i
	de du lo tirxu
tu'u

つまり、同じ do に lo cinfo と lo tirxu を unification しようとして、
失敗する。
scope についてきちんと対処する必要がある。
また、色分け問題においては、core dump した。

scope は呼び出しごとに [Int] を変化させることで解決できると思う。
Rule は [Int] -> Rule とする。

かなりうまくいっているが、まだ再帰的なルールには対応していない。
また、mlatu.loj で、質問に複数の変数が入ると無限ループに入ってしまうようだ。

再帰的なルールについても本質的にはうまくいっているのだが、
しかし、それ以上マッチするものが存在し得ないことを検出できないだろうか。

adhoc なやりかただとある程度以上に深くなってきたらやめる。
といったやりかたが考えられる。

問題は、ask した後に merge してしまっているところにある。
つまり、ask する前に merge あるいは apply しなければならない。
そうしないと無限ループになってしまう。

Result と Fact の間の merge はつまり apply ということである。
apply が必要。
apply :: Result -> Fact -> Fact

2012.09.16 Sun.

Prolog2 を作る。
そのためにまずは Prolog のなかの type や class 等の流用できるものは、
たとえば PrologTools 等に分けておく。

うまくいった。
次は ma の答えを表示するようにする。
そのあとは top の da, de, di, do や xy., .ybu, .alabam bu 等の答えを表示するようにする。

2012.09.18 Tue.

examples を cabal に同梱することにする。
また、cabal 内に説明を書くようにする。

2012.09.19 Wed.

引数無しで起動したときの動作を変える。
定義を入力して、fa'o で終える。

2012.09.20 Thu.

README の作成

例えば以下のような例が可能であるか考えること。
.i da rirni de .ijanai da patfu de
.i da rirni de .ijanai da mamta de
.i da nanmu .ijanai da patfu de
.i da ninmu .ijanai da mamta de
.i da patfu de .ijanai tu'e da nanmu .i da rirni de tu'u
.i da mamta de .ijanai tu'e da ninmu .i da rirni de
今の実装では無限ループになってしまう。
これを解決するきれいな方法はあるか。

定義されていない事実に対する返答は nago'i で良いか。
あるいは「知らない」とするべきか。
前者とするとしたらその根拠は、Prolog における論理空間が、
偽からはじまり or 結合であり、自然言語の論理空間は真ではじまり and 結合である
ということになるだろうが、それをきちんと論証する必要がある。

タプルやリストを lojban でどう表現しようか。
セットを表現するやりかたをまず調べる。
とりあえず重要性の高いのはリストなのでそちらを先に実装しよう。
タプルは必ずしも必要ではないと思う。

また Haskell 的な IO monad の考え方を取り入れたいと思うが、
どうやったらうまく merge できるだろうか。

[a, b, c] は .abu ce'o by. ce'o cy. でいいと思う。
a : [b, c] をどう表現しようか。
lo te ziljmina be .abu bei by. ce'o cy. ってところか。
joi があれば良いのだが。
あるいは lo terziljmina be .abu bei by. ce'o cy. か。
そうすると a : b : c : [] はどうなるか。
[] は lo kunti なので、
lo terziljmina be .abu bei lo terziljmina be by. bei lo terziljmina be cy. bei
lo kunti か。
長いな。
しかし terziljmina は ++ にも使いたいし、困ったな。
むしろ cmima を使うとか。
しかし、これは rest の入る場所がないからだめだ。
selzilvimcu が使えるかな。
lo selzilvi'u be .abu bei by. ce'o cy. かな。

List 同士の unification は、
展開して unification し、それを merge すればいいだろう。
List と Con の unification は失敗とする。
List と変数の unification は List を Con のように扱えば良いように思うが、
これはうまくいくだろうか。

2012.09.21 Fri.

そろそろ、コードが限界に達したようだ。
リファクタリングを始める必要がある。

2012.09.22 Sat.

Unif.hs の merge を refactoring 中だが。

unify の返り値を Result sc s にしたほうが良さそうだ。

次は unify を List 同士や List と Cons 等に対応させて、
もっと上の段階でも使えるようにする。

simp で、同じ Var に入っている List 同士を unify する。
その結果は Result となるのだが、それらを次々に merge していく必要がある。
またそれ自身の値はどうなるのかを考える必要がある。
それ自身の値は、Con または、List または Cons になるはずだ。
unify に unify の結果として、それ自身の値も返すようにしたほうが良いかもしれない。

unifMaybe を (Maybe Term, Result) -> Maybe Term -> Maybe (Maybe Term, Result)
とする。
そして、
	(v', r') <- foldM unifMaybe (v, 前の result の Result) (map snd same)
	return $ (foldr union ts (map fast same), v') : simp r' nosm
とする。
こうすれば、simp で次々に制約が受け渡されていくだろう。

2012.09.23 Sun.

is と + を実装しようかと思う。
とりあえず binxo でも使おうかな。
is は無条件で Result に ([var], Just val) を追加すれば良い。
+ はその var に

Prolog モジュールのところで先頭が binxo だった場合のみ特別扱いにするのが良いだろう。
Term にも特別な値を用意しておいた方がいいか、
あるいは Atom のレベルで用意すれば十分か。
xy. binxo lo terziljmina be xy. bei li pa
といった感じ。

今の実装だと、na の rule が最後に check されるので意図通りに動かない可能性がある。
まあ、これを直すのは先々の話になるだろう。

2012.09.25 Tue.

今の段階でできることを test としてまとめてしまおう。
とりあえず、全部が違うという rule の処理はできるので、
そこらへんの test を LojysambanLib と Prolog2 のレベルで作成して、
hunit に登録しておく。
そしたら、リファクタリングを行う。
目標は .ijanai のなかで datsi'u を使ったときにうまく動かないところの修正だ。

4x4 の数独を解くのに、時間がかかりすぎるため、リファクタリングにより、
コードの効率を見ていく。
